version: "3.8"

x-deploy: &default-deploy
  replicas: 1
  restart_policy:
    condition: on-failure

x-deploy-manager: &default-deploy-manager
  <<: *default-deploy
  placement:
    constraints:
      - "node.role==manager"

x-deploy-worker: &default-deploy-worker
  <<: *default-deploy
  placement:
    constraints:
      - "node.role==worker"

services:
  visualizer:
    image: dockersamples/visualizer:latest
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - "80:8080"
    deploy: *default-deploy-manager

  sparkmaster:
    image: jonatasmiguel/spark_image:latest
    ports:
      - "4040:4040"
      - "7077:7077"
      - "8080:8080"
    environment:
      - SPARK_ROLE=master
    deploy: *default-deploy-manager
    networks:
      - cluster_network
    volumes:
      - global-volume:/checkpoint

  sparkworker:
    image: jonatasmiguel/spark_image:latest
    entrypoint: dockerize -wait tcp://sparkmaster:7077 -timeout 240s /sbin/my_init
    ports:
      - "8081:8081"
      - "41352:41352"
    environment:
      - SPARK_MASTER=sparkmaster
      - SPARK_ROLE=slave
    deploy: *default-deploy-worker
    networks:
      - cluster_network
    volumes:
      - global-volume:/checkpoint

  streaming:
    image: jonatasmiguel/streaming_image:latest
    depends_on: 
      - sparkmaster
      - sparkworker
      - dashboards
      - twitter
    extra_hosts:
      - "streaming:0.0.0.0"
    ports:
      - "5005:5005"
      - "41100:41100"
    deploy: *default-deploy-worker
    networks:
      - cluster_network
    volumes:
      - global-volume:/checkpoint

  dashboards:
    image: jonatasmiguel/dashboards_image:latest
    extra_hosts:
      - "dashboards:0.0.0.0"
    ports:
      - "5009:5009"
    deploy: *default-deploy-worker
    networks:
      - cluster_network

  twitter:
    image: jonatasmiguel/twitter_image:latest
    extra_hosts:
      - "twitter:0.0.0.0"
    ports:
      - "9017:9017"
    deploy: *default-deploy-worker
    networks:
      - cluster_network

  hdfs_namenode:
    deploy: *default-deploy-manager
    networks:
      hostnet: {}
    volumes:
      - hdfs_namenode:/hadoop-3.2.0/var/name_node
    command:
      namenode -fs hdfs://${PRIMARY_HOST}:9000
    image: hadoop:3.2.0
    environment:
      - PRIMARY_HOST=namenode

  hdfs_datanode:
    deploy:
      mode: global
    networks:
      hostnet: {}
    volumes:
      - hdfs_datanode:/hadoop-3.2.0/var/data_node
    command:
      datanode -fs hdfs://${PRIMARY_HOST}:9000
    image: hadoop:3.2.0
    environment:
      - PRIMARY_HOST=namenode
networks:
  cluster_network:
    attachable: true
    driver: overlay
  hostnet:
    external: true
    name: host

volumes:
  global-volume:
  data-0:
  data-1:
  name:
  primary-namenode:
  secondary-namenode:
  datanode:
  hdfs_namenode:
  hdfs_datanode: